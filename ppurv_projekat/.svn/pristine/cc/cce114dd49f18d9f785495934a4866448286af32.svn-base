/*
 * ImageProcessing.c
 *
 *  Created on: Oct 20, 2018
 *      Author: aleksa
 */

#include "ImageProcessing.h"

uint32_t MATRIX_WIDTH = 16;
uint32_t MATRIX_HEIGHT = 16;

uint32_t MATRIX_X = 0;
uint32_t MATRIX_Y = 0;

/*
 * (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")
 * (MISRA-C:2004 5.7/A) No identifier name should be reused ("j")
 *
 * promenjive se nalaze u razlicitim scope-ovima
 */

uint8_t* pixelsToBoolean (char* filename)
{

	/*
	 * MISRA C: 20.4/R Violated - malloc should not be used
	 * zbog funkcionalnosti bmp.h
	 * kada se koristi staticki niz -> "error: assignment to expression with array type error"
	 * staticki niz nije dodeljiv
	 */
	uint8_t* outputData = (uint8_t*) malloc(MATRIX_WIDTH * MATRIX_HEIGHT);
	uint32_t i;
	uint32_t j;
	uint32_t m = 0;


	BITMAPFILEHEADER bmapFileHeader;
	BITMAPINFOHEADER bmapInfoHeader;
	uint8_t* bitmapData;

	/* MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic
	 * ne vidim u cemu je problem
	 */
	outputData[0] = 0;

	/*
	 * (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function
	 * potreban izlaz na vise mesta
	 */
	if (checkFileExtension(filename, BMP_E) == 0)
	{
		return NULL;
	}

	/*
	 * MISRA C: 20.4/R Violated - malloc should not be used
	 * zbog funkcionalnosti bmp.h
	 * kada se koristi staticki niz -> "error: assignment to expression with array type error"
	 * staticki niz nije dodeljiv
	 */
	/* Loading bitmap*/
	bitmapData = (uint8_t*) malloc(MATRIX_WIDTH * MATRIX_HEIGHT);
	bitmapData = LoadBitmapFile(filename, &bmapFileHeader, &bmapInfoHeader);

	if (!bitmapData)
	{
		return NULL;
	}

	printf("Bitmap %s loaded.\n\n", filename);

	for (i = 0; i < (MATRIX_WIDTH * MATRIX_HEIGHT * 3); i+=3)
	{

		for (j = 0; j < 3; j++)
		{
			/*
			 * MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic
			 * smatram da je izraz uredu
			 */
			outputData[m] += bitmapData[j + i];
		}
		m++;
	}

	for (i = 0; i < (MATRIX_WIDTH * MATRIX_HEIGHT); i++)
	{
		/*
		 * MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic
		 * smatram da je izraz uredu
		 */

		/*
		 * (MISRA-C:2004 6.2/R) signed and unsigned
		 * char type shall be used only for the storage and use of numeric values
		 * TREBA POGLEDATI NA STA SVE UTICE PROMENA
		 */
		if (outputData[i] >= 127)
		{
			outputData[i] = '1';
		}
		else
		{
			outputData[i] = '0';
		}
	}

	return outputData;
}

uint8_t* readMatrixFromFile (char* filename)
{

	FILE* fp = NULL;

	/*
	 * (MISRA-C:2004 20.4/R) Dynamic heap memory allocation shall not be used ("malloc")
	 *
	 */
	uint8_t* retMatrix = (uint8_t*) malloc(MATRIX_WIDTH * MATRIX_HEIGHT);

	/*
	 * error: expression must have a constant value
	 * zbog implementacije nije moguce postaviti konstantnu vrednost
	 */
	uint8_t temp[MATRIX_WIDTH + 2];
	int32_t i;
	int32_t j;

	/*
	 * MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic
	 * smatram da su izrazi uredu
	 */
	retMatrix[0] = 0;
	temp[0] = 0;

	if (!checkFileExtension(filename, TXT_E))
	{
		return NULL;
	}

	fp = fopen((char*)filename, "r");

	if (fp == NULL)
	{
		return NULL;
	}

	j = 0;
	while ((fgets((char*) temp, MATRIX_WIDTH + 2, fp)) != NULL)
	{
			for (i = 0; i < MATRIX_WIDTH; i++){
			if (*temp == '\n' || *temp == 0)
			{
				break;
			}
			if (temp[i] == '0' || temp[i] == '1')
			{
				retMatrix[j] = temp[i];
				j++;
			}
		}


	}

	fclose(fp);

	return retMatrix;
}

void dumpMatrix(uint8_t* matrix){

	int32_t i;

	printf("*********************** MATRIX DUMP: ***********************");

	for (i = 0; i < (MATRIX_WIDTH * MATRIX_HEIGHT); i++)
	{
		if ((i % MATRIX_WIDTH) == 0)
		{
			printf("\n");
		}
		printf("%c", matrix[i]);
	}

	printf("\n");
}

bool checkFileExtension (char* filename, char* extension)
{

	int32_t i;
	int32_t j;

	i = 2;
	j = strlen(filename) - 1;
	char fileExtension[3];
	while (filename[j] != '.')
	{
		fileExtension[i] = filename[j];
		i--;
		j--;
	}

	if (strcmp(fileExtension, extension))
	{
		return false;
	}

	return true;
}

void matrixDimensionsParser (char* iWidth, char* iHeight)
{

	MATRIX_WIDTH = strtol(iWidth, NULL, 10);
	MATRIX_HEIGHT = strtol(iHeight, NULL, 10);

}

void getCoordinates (char* X, char* Y)
{

	MATRIX_X = strtol(X, NULL, 10);
	MATRIX_Y = strtol(Y, NULL, 10);

}
